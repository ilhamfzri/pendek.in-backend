// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/ilhamfzri/pendek.in/internal/model/domain"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// SocialMediaTypeRepository is an autogenerated mock type for the SocialMediaTypeRepository type
type SocialMediaTypeRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tx, socialMediaType
func (_m *SocialMediaTypeRepository) Create(ctx context.Context, tx *gorm.DB, socialMediaType domain.SocialMediaType) (domain.SocialMediaType, error) {
	ret := _m.Called(ctx, tx, socialMediaType)

	var r0 domain.SocialMediaType
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, domain.SocialMediaType) domain.SocialMediaType); ok {
		r0 = rf(ctx, tx, socialMediaType)
	} else {
		r0 = ret.Get(0).(domain.SocialMediaType)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, domain.SocialMediaType) error); ok {
		r1 = rf(ctx, tx, socialMediaType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAll provides a mock function with given fields: ctx, tx
func (_m *SocialMediaTypeRepository) FetchAll(ctx context.Context, tx *gorm.DB) ([]domain.SocialMediaType, error) {
	ret := _m.Called(ctx, tx)

	var r0 []domain.SocialMediaType
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB) []domain.SocialMediaType); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SocialMediaType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, tx, id
func (_m *SocialMediaTypeRepository) FindByID(ctx context.Context, tx *gorm.DB, id int) (domain.SocialMediaType, error) {
	ret := _m.Called(ctx, tx, id)

	var r0 domain.SocialMediaType
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int) domain.SocialMediaType); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Get(0).(domain.SocialMediaType)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, int) error); ok {
		r1 = rf(ctx, tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, tx, name
func (_m *SocialMediaTypeRepository) FindByName(ctx context.Context, tx *gorm.DB, name string) (domain.SocialMediaType, error) {
	ret := _m.Called(ctx, tx, name)

	var r0 domain.SocialMediaType
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) domain.SocialMediaType); ok {
		r0 = rf(ctx, tx, name)
	} else {
		r0 = ret.Get(0).(domain.SocialMediaType)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, string) error); ok {
		r1 = rf(ctx, tx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSocialMediaTypeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSocialMediaTypeRepository creates a new instance of SocialMediaTypeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSocialMediaTypeRepository(t mockConstructorTestingTNewSocialMediaTypeRepository) *SocialMediaTypeRepository {
	mock := &SocialMediaTypeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
