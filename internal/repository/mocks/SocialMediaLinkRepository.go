// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/ilhamfzri/pendek.in/internal/model/domain"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// SocialMediaLinkRepository is an autogenerated mock type for the SocialMediaLinkRepository type
type SocialMediaLinkRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tx, socialMediaLink
func (_m *SocialMediaLinkRepository) Create(ctx context.Context, tx *gorm.DB, socialMediaLink domain.SocialMediaLink) (domain.SocialMediaLink, error) {
	ret := _m.Called(ctx, tx, socialMediaLink)

	var r0 domain.SocialMediaLink
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, domain.SocialMediaLink) domain.SocialMediaLink); ok {
		r0 = rf(ctx, tx, socialMediaLink)
	} else {
		r0 = ret.Get(0).(domain.SocialMediaLink)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, domain.SocialMediaLink) error); ok {
		r1 = rf(ctx, tx, socialMediaLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTypeAndUserID provides a mock function with given fields: ctx, tx, typeId, userId
func (_m *SocialMediaLinkRepository) FindByTypeAndUserID(ctx context.Context, tx *gorm.DB, typeId uint, userId string) (domain.SocialMediaLink, error) {
	ret := _m.Called(ctx, tx, typeId, userId)

	var r0 domain.SocialMediaLink
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint, string) domain.SocialMediaLink); ok {
		r0 = rf(ctx, tx, typeId, userId)
	} else {
		r0 = ret.Get(0).(domain.SocialMediaLink)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uint, string) error); ok {
		r1 = rf(ctx, tx, typeId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: ctx, tx, userId
func (_m *SocialMediaLinkRepository) FindByUserID(ctx context.Context, tx *gorm.DB, userId string) ([]domain.SocialMediaLink, error) {
	ret := _m.Called(ctx, tx, userId)

	var r0 []domain.SocialMediaLink
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) []domain.SocialMediaLink); ok {
		r0 = rf(ctx, tx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SocialMediaLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, string) error); ok {
		r1 = rf(ctx, tx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tx, socialMediaLink
func (_m *SocialMediaLinkRepository) Update(ctx context.Context, tx *gorm.DB, socialMediaLink domain.SocialMediaLink) (domain.SocialMediaLink, error) {
	ret := _m.Called(ctx, tx, socialMediaLink)

	var r0 domain.SocialMediaLink
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, domain.SocialMediaLink) domain.SocialMediaLink); ok {
		r0 = rf(ctx, tx, socialMediaLink)
	} else {
		r0 = ret.Get(0).(domain.SocialMediaLink)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, domain.SocialMediaLink) error); ok {
		r1 = rf(ctx, tx, socialMediaLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSocialMediaLinkRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSocialMediaLinkRepository creates a new instance of SocialMediaLinkRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSocialMediaLinkRepository(t mockConstructorTestingTNewSocialMediaLinkRepository) *SocialMediaLinkRepository {
	mock := &SocialMediaLinkRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
