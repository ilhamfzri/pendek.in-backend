// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/ilhamfzri/pendek.in/internal/model/domain"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tx, user
func (_m *UserRepository) Create(ctx context.Context, tx *gorm.DB, user domain.User) (domain.User, error) {
	ret := _m.Called(ctx, tx, user)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, domain.User) domain.User); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, domain.User) error); ok {
		r1 = rf(ctx, tx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: ctx, tx, email
func (_m *UserRepository) FindByEmail(ctx context.Context, tx *gorm.DB, email string) (domain.User, error) {
	ret := _m.Called(ctx, tx, email)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) domain.User); ok {
		r0 = rf(ctx, tx, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, string) error); ok {
		r1 = rf(ctx, tx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUsername provides a mock function with given fields: ctx, tx, username
func (_m *UserRepository) FindByUsername(ctx context.Context, tx *gorm.DB, username string) (domain.User, error) {
	ret := _m.Called(ctx, tx, username)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) domain.User); ok {
		r0 = rf(ctx, tx, username)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, string) error); ok {
		r1 = rf(ctx, tx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tx, user
func (_m *UserRepository) Update(ctx context.Context, tx *gorm.DB, user domain.User) (domain.User, error) {
	ret := _m.Called(ctx, tx, user)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, domain.User) domain.User); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, domain.User) error); ok {
		r1 = rf(ctx, tx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: ctx, tx, userId, newPassword
func (_m *UserRepository) UpdatePassword(ctx context.Context, tx *gorm.DB, userId string, newPassword string) error {
	ret := _m.Called(ctx, tx, userId, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string, string) error); ok {
		r0 = rf(ctx, tx, userId, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
